{"ast":null,"code":"import gql from \"graphql-tag\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allGuitarsMeta;\n\n      const {\n        skip,\n        first\n      } = args;\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allGuitarsMeta = data._allGuitarsMeta) === null || _data$_allGuitarsMeta === void 0 ? void 0 : _data$_allGuitarsMeta.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(`There are ${items.length} in the cache! Sending them to apollo`);\n        return items;\n      }\n\n      return false;\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      console.log(`Merging items from the network ${incoming.length}`);\n      console.log(incoming);\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/lib/paginationField.js"],"names":["gql","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allGuitarsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AAELC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,eAAT,0DAAG,sBAAuBD,KAArC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAGH,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B;AACzB,eAAO,KAAP;AACD;;AACD,UAAGU,KAAK,CAACI,MAAT,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAa,aAAYN,KAAK,CAACI,MAAO,uCAAtC;AACA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP;AACD,KAlBI;;AAmBLO,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClCkB,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCE,QAAQ,CAACJ,MAAO,EAA9D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACD;;AAtBI,GAAP;AAwBD","sourcesContent":["import gql from \"graphql-tag\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\n\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    read(existing = [], { args, cache }) {\n      const { skip, first } = args;\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allGuitarsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if(items.length !== first) {\n        return false;\n      }\n      if(items.length) {\n        console.log(`There are ${items.length} in the cache! Sending them to apollo`)\n        return items;\n      }\n\n      return false;\n    },\n    merge(existing, incoming, { args }) {\n      console.log(`Merging items from the network ${incoming.length}`);\n      console.log(incoming)\n    }, \n  };\n}\n"]},"metadata":{},"sourceType":"module"}