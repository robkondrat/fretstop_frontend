{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/components/UpdateGuitar.js\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nconst SINGLE_GUITAR_QUERY = gql`\n  query SINGLE_GUITAR_QUERY($id: ID!) {\n    Guitar(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_GUITAR_MUTATION = gql`\n  mutation UPDATE_GUITAR_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateGuitar(\n      id: $id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nexport default function UpdateGuitar({\n  id\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_GUITAR_QUERY, {\n    variables: {\n      id: id\n    }\n  }); // 2. need to get mutation to update the guitar\n\n  const [updateGuitar, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_GUITAR_MUTATION, {\n    variables: {\n      id\n    }\n  }); // 3. need the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update \", id, \"!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/components/UpdateGuitar.js"],"names":["useMutation","useQuery","gql","SINGLE_GUITAR_QUERY","UPDATE_GUITAR_MUTATION","UpdateGuitar","id","data","error","loading","variables","updateGuitar","updateData","updateError","updateLoading"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,mBAAmB,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAME,sBAAsB,GAAGF,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;AAmBA,eAAe,SAASG,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAA8B;AAC3C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BR,QAAQ,CAACE,mBAAD,EAAsB;AAC7DO,IAAAA,SAAS,EAAE;AACTJ,MAAAA,EAAE,EAAEA;AADK;AADkD,GAAtB,CAAzC,CAD2C,CAO3C;;AACA,QAAM,CACJK,YADI,EAEJ;AAAEJ,IAAAA,IAAI,EAAEK,UAAR;AAAoBJ,IAAAA,KAAK,EAAEK,WAA3B;AAAwCJ,IAAAA,OAAO,EAAEK;AAAjD,GAFI,IAGFd,WAAW,CAACI,sBAAD,EAAyB;AACtCM,IAAAA,SAAS,EAAE;AACTJ,MAAAA;AADS;AAD2B,GAAzB,CAHf,CAR2C,CAiB3C;;AACA,sBAAO;AAAA,0BAAWA,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst SINGLE_GUITAR_QUERY = gql`\n  query SINGLE_GUITAR_QUERY($id: ID!) {\n    Guitar(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nconst UPDATE_GUITAR_MUTATION = gql`\n  mutation UPDATE_GUITAR_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateGuitar(\n      id: $id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateGuitar({ id }) {\n  const { data, error, loading } = useQuery(SINGLE_GUITAR_QUERY, {\n    variables: {\n      id: id,\n    },\n  });\n\n  // 2. need to get mutation to update the guitar\n  const [\n    updateGuitar,\n    { data: updateData, error: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_GUITAR_MUTATION, {\n    variables: {\n      id,\n      \n    },\n  });\n  // 3. need the form to handle the updates\n  return <p>Update {id}!</p>;\n}\n"]},"metadata":{},"sourceType":"module"}