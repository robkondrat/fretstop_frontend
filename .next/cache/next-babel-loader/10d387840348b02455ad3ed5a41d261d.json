{"ast":null,"code":"import _slicedToArray from \"/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/components/UpdateGuitar.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_GUITAR_MUTATION(\\n    $id: ID!\\n    $name: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateGuitar(\\n      id: $id\\n      data: { id: $id, name: $name, description: $description, price: $price }\\n    ) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_GUITAR_QUERY($id: ID!) {\\n    Guitar(where: { id: $id }) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nvar SINGLE_GUITAR_QUERY = gql(_templateObject());\nvar UPDATE_GUITAR_MUTATION = gql(_templateObject2());\nexport default function UpdateGuitar(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_GUITAR_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // 2. need to get mutation to update the guitar\n\n\n  var _useMutation = useMutation(UPDATE_GUITAR_MUTATION, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateGuitar = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; // 3. need the form to handle the updates\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update \", id, \"!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UpdateGuitar, \"rnfIwEBFHF7DdVnHlDz7d+JALZY=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateGuitar;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateGuitar\");","map":{"version":3,"sources":["/Users/robkondratowicz/Desktop/Actualize/fretstop_frontend/components/UpdateGuitar.js"],"names":["useMutation","useQuery","gql","SINGLE_GUITAR_QUERY","UPDATE_GUITAR_MUTATION","UpdateGuitar","id","variables","data","error","loading","updateGuitar","updateData","updateError","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,mBAAmB,GAAGD,GAAH,mBAAzB;AAWA,IAAME,sBAAsB,GAAGF,GAAH,oBAA5B;AAmBA,eAAe,SAASG,YAAT,OAA8B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAAA,kBACVL,QAAQ,CAACE,mBAAD,EAAsB;AAC7DI,IAAAA,SAAS,EAAE;AACTD,MAAAA,EAAE,EAAEA;AADK;AADkD,GAAtB,CADE;AAAA,MACnCE,IADmC,aACnCA,IADmC;AAAA,MAC7BC,KAD6B,aAC7BA,KAD6B;AAAA,MACtBC,OADsB,aACtBA,OADsB,EAO3C;;;AAP2C,qBAWvCV,WAAW,CAACI,sBAAD,EAAyB;AACtCG,IAAAA,SAAS,EAAE;AACTD,MAAAA,EAAE,EAAEA;AADK;AAD2B,GAAzB,CAX4B;AAAA;AAAA,MASzCK,YATyC;AAAA;AAAA,MAUjCC,UAViC,kBAUvCJ,IAVuC;AAAA,MAUdK,WAVc,kBAUrBJ,KAVqB;AAAA,MAUQK,aAVR,kBAUDJ,OAVC,EAgB3C;;;AACA,sBAAO;AAAA,0BAAWJ,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAlBuBD,Y;UACWJ,Q,EAU7BD,W;;;KAXkBK,Y","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst SINGLE_GUITAR_QUERY = gql`\n  query SINGLE_GUITAR_QUERY($id: ID!) {\n    Guitar(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nconst UPDATE_GUITAR_MUTATION = gql`\n  mutation UPDATE_GUITAR_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateGuitar(\n      id: $id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateGuitar({ id }) {\n  const { data, error, loading } = useQuery(SINGLE_GUITAR_QUERY, {\n    variables: {\n      id: id,\n    },\n  });\n\n  // 2. need to get mutation to update the guitar\n  const [\n    updateGuitar,\n    { data: updateData, error: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_GUITAR_MUTATION, {\n    variables: {\n      id: id,\n    },\n  });\n  // 3. need the form to handle the updates\n  return <p>Update {id}!</p>;\n}\n"]},"metadata":{},"sourceType":"module"}